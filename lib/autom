# definitions - wired into processor
# $S, $NameStart, $NameC, $Hex - per XML spec

# State Statename Fallbackstate {location-description}

# Start
State Start InProlog {in prolog}
T < LTatStart !MarkLt
T $S InProlog

State LTatStart BustedProlog {}
T ? Push(TryXMLD,InProlog) !ColdStart
T ! MDOinProlog
T $NameStart StagGI !HotStart

State BustedProlog InProlog {}
T $S InProlog
T $. BustedProlog

State InProlog BustedProlog {}
T < LTinProlog !MarkLt
T $S InProlog

State AfterDTD AfterDTD {after DTD}
T < LTafterDTD !MarkLt
T $S AfterDTD

# saw < in prolog
State LTinProlog LTinProlog {after <}
T ? Push(InPI,InProlog) !ColdStart
T ! MDOinProlog
T $NameStart StagGI !HotStart

# saw < after DTD in prolog
State LTafterDTD AfterDTD {}
T ? Push(InPI,AfterDTD) !ColdStart
T ! MDOafterDTD
T $NameStart StagGI !HotStart

# saw < in doc
State SawLT BustedMarkup {}
T ? Push(InPI,InDoc) !ColdStart
T ! MDO
T / ETAGO
T $NameStart StagGI !HotStart

# saw <!
State MDOinProlog BustedMarkup {after <!}
T - Push(PComStart,InProlog)
T D Keyword(DOCTYPE,InDoctype,1)

State MDOafterDTD AfterDTD {}
T - Push(PComStart,AfterDTD)

# saw <!
State MDO BustedMarkup {}
T - Push(COMStartHalf,InDoc)
T [ StartCData1

# Special state for matching keywords... 
State Keyword Start {}
T $. Keyword !InKW

# after <?
State InPI BustedMarkup {in PI}
T $NameStart PI2
State PI2  BustedMarkup {}
T $NameC PI2
T $S PI3 !EndSave
T ? PICMustHaveGT !EndSave
State PI3 BustedMarkup {}
T $S PI3
T ? PICwantsGT !HotStart
T $. PI4 !HotStart

State PI4 BustedMarkup {}
T ? PICwantsGT
T $. PI4

# require > in PIC
State PICMustHaveGT BustedMarkup {}
T > Pop() !ReportPI

# want > in PIC 
State PICwantsGT BustedMarkup {}
T > Pop() !EndSave !ReportPI
T ? PICwantsGT
T $. PI4

# saw <!- 
State COMStartHalf BustedMarkup {after <!-}
T - InComment

# Comment in prolog; only difference is we don't start saving after
State PComStart BustedMarkup {}
T - InPComment

# base comment body
State InComment InComment {in comment}
T - DashInComment
T $. InComment

# base comment body
State InPComment InComment {}
T - DashInPComment
T $. InPComment

# saw - in comment
State DashInComment InComment {}
T - DDInComment
T $. InComment

# saw - in comment
State DashInPComment InComment {}
T - DDInPComment
T $. InPComment

# saw -- in comment
State DDInComment InComment {}
T > Pop() !ColdStart

# saw -- in comment
State DDInPComment InComment {}
T > Pop()

# saw <![
State StartCData1 InCData {in <![CDATA[}
T C Keyword(CDATA,AfterCdataKW,1)
State AfterCdataKW InCData {}
T [ InCData !ColdStart

# in CDATA section
State InCData BustedMarkup {}
T ] EndCData1 !ReportText
T $. InCData

# ] in CDATA
State EndCData1 BustedMarkup {}
T ] EndCData2
T $. InCData !SaveExtra(])

# ]] in CDATA
State EndCData2 BustedMarkup {}
T ] EndCData2 !SaveExtra(]) !ReportText
T > InDoc !ReportText !ColdStart
T $. InCData !SaveExtra(]])

# after <!DOCTYPE
State InDoctype InDoctype {after <!DOCTYPE}
T $NameStart Push(GIGrabber,SawDTName) !HotStart
T $S InDoctype

# General state for grabbing a space-ended GI, saving it, and popping
State GIGrabber InDoctype {}
T $NameC GIGrabber
T $S Pop() !EndGI

# after doctype name
State SawDTName SawDTName {after DOCTYPE Name}
T S Push(System1,SawDTypeExternalID)
T P Push(Public1,SawDTypeExternalID)
T [ SawDTName !SubsetExists 
T > AfterDTD
T $S SawDTName

# <!doctype foo p
State Public1 SawPublic {in PUBLIC}
T U Keyword(PUBLIC,AfterPublicKW,2)

State AfterPublicKW SawPublic {after PUBLIC}
T $S SawPublic

State SawPublic BustedProlog {}
T ' Push(SQPublic,AfterPublic) !ColdStart
T " Push(DQPublic,AfterPublic) !ColdStart
T $S SawPublic

State SQPublic BustedProlog {in PUBLIC ID}
T ' Pop() !EndSave
T $PubID SQPublic

State DQPublic BustedProlog {}
T " Pop() !EndSave
T $PubID DQPublic

State AfterPublic BustedProlog {after PUBLIC ID}
T $S SawPubID

State SawPubID InDoctype {}
T $S SawPubID
T ' Push(SQCData,SawSystemID) !ColdStart
T " Push(DQCData,SawSystemID) !ColdStart

State SawSystemID InDoctype {after SYSTEM ID}
T $. Pop() !StuffChar

# <!doctype foo S
State System1 SawSystem {in SYSTEM}
T Y Keyword(SYSTEM,AfterSystemKW,2)
State AfterSystemKW SawSystem {after SYSTEM}
T $S SawSystem

# <!doctype foo system 
State SawSystem BustedProlog {}
T ' Push(SQCData,SawSystemID) !ColdStart
T " Push(DQCData,SawSystemID) !ColdStart
T $S SawSystem

#
State SQCData BustedMarkup {}
T ' Pop() !EndSave
T $. SQCData

#
State DQCData BustedMarkup {}
T " Pop() !EndSave
T $. DQCData

# <!doctype foo system "whatever" 
State SawDTypeExternalID InDoctype {after SYSTEM ID}
T > AfterDTD !ReportDoctype
T [ SawDTypeExternalID  !SubsetExists
T $S SawDTypeExternalID

# saw </
State ETAGO BustedMarkup {after </}
T $NameStart EtagGI !HotStart

#9 GI in end-tag
State EtagGI BustedMarkup {in end-tag}
T > InDoc !EndGI !ReportETag
T $NameC EtagGI
T $S SawEtagGI !EndGI

#10 S after GI in end-tag
State SawEtagGI BustedMarkup {}
T > InDoc !ReportETag
T $S SawEtagGI

# in Start tag GI
State StagGI BustedMarkup {in element type}
T $NameC StagGI
T $S InStag !EndGI
T > InDoc !EndGI !ReportSTag
T / EmptyClose !EndGI

State EmptyClose BustedMarkup {after / in start-tag}
T > InDoc !ReportEmpty

# in tag after gi
State InStag BustedMarkup {in start-tag}
T > InDoc !ReportSTag
T / EmptyClose
T $S InStag
T $NameStart AttrName !HotStart

# Attr name
State AttrName BustedMarkup {}
T = Eq2 !EndAttribute
T $NameC AttrName
T $S Eq1 !EndAttribute

# ' ' before =
State Eq1 BustedMarkup {}
T = Eq2
T $S Eq1

# = in Eq
State Eq2 BustedMarkup {after AttrName= in start-tag}
T ' Push(SQAVal,InStag) !ColdStart
T " Push(DQAVal,InStag) !ColdStart
T $S Eq2

# in AttrValue, '-delimited
State SQAVal BustedMarkup {}
T < SQAVal !MarkLt
T ' Pop() !EndAttrVal
T & Push(SawAmp,SQAVal) 
T $. SQAVal

# in AttrValue, "-delimited
State DQAVal BustedMarkup {}
T < DQAVal !MarkLt
T " Pop() !EndAttrVal
T & Push(SawAmp,DQAVal) 
T $. DQAVal

# scanning in PCData
State InDoc InDoc {in character data}
T < SawLT !ReportText !MarkLt
T & Push(SawAmp,InDoc) 
T $. InDoc
T ] RSBInDoc

# ] in doc
State RSBInDoc InDoc {}
T < SawLT !ReportText !MarkLt
T & Push(SawAmp,InDoc) 
T ] RSB2InDoc
T $. InDoc

# ]] in doc
State RSB2InDoc InDoc {}
T < SawLT !ReportText !MarkLt
T & Push(SawAmp,InDoc) 
T > InDoc !FloatingMSE
T ] RSB2InDoc
T $. InDoc

# After root element
State AfterRoot AfterRoot {after end of document}
T $S AfterRoot
T < LTAfterRoot

State LTAfterRoot BustedMarkup {< after document}
T ? Push(InPI,AfterRoot) !ColdStart
T ! ComStartAfter
State ComStartAfter BustedMarkup {}
T - Push(COMStartHalf,AfterRoot)

State SawAmp BustedEntity {after &}
T a AmpA
T g AmpG
T l AmpL
T q AmpQ
T # AmpHash
T $NameStart EntRefBody

# reading numeric char refs
State AmpHash BustedEntity {in &# reference}
T 0123456789 DecHash
T x HexRef

# decimal NCR
State DecHash BustedEntity {in &# decimal-number reference}
T 0123456789 DecHash
T ; Pop() !HashRef

# hex char refs
State HexRef BustedEntity {in &#x reference}
T $Hex HexRef
T ; Pop() !HashRef

State BustedEntity InDoc {}
T ; Pop() !ColdStart
T $. BustedEntity

State AmpG BustedEntity {in entity reference}
T t AmpGt
T $NameC EntRefBody

State AmpGt BustedEntity {}
T ; Pop() !CharRef(>)
T $NameC EntRefBody

State AmpL BustedEntity {}
T t AmpLt
T $NameC EntRefBody

State AmpLt BustedEntity {}
T ; Pop() !CharRef(<)
T $NameC EntRefBody

State AmpQ BustedEntity {}
T u AmpQu
T $NameC EntRefBody

State AmpQu BustedEntity {}
T o AmpQuo
T $NameC EntRefBody

State AmpQuo BustedEntity {}
T t AmpQuot
T $NameC EntRefBody

State AmpQuot BustedEntity {}
T ; Pop() !CharRef(")
T $NameC EntRefBody

State AmpA BustedEntity {}
T m AmpAm
T p AmpAp
T $NameC EntRefBody

State AmpAp BustedEntity {}
T o AmpApo
T $NameC EntRefBody

State AmpApo BustedEntity {}
T s AmpApos
T $NameC EntRefBody

State AmpApos BustedEntity {}
T ; Pop() !CharRef(')
T $NameC EntRefBody

State AmpAm BustedEntity {}
T p AmpAmp
T $NameC EntRefBody

State AmpAmp BustedEntity {}
T ; Pop() !CharRef(&)
T $NameC EntRefBody

State EntRefBody BustedEntity {in entity reference}
T ; Pop() !EntityReference
T $NameC EntRefBody

# Breakage in markup - wait for ">"
State BustedMarkup InDoc {}
T > InDoc !ColdStart
T $. BustedMarkup

# XML declaration is:
# XMLDecl ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'
# TextDecl ::= '<?xml' VersionInfo? EncodingDecl S? '?>'
# VersionInfo ::= S 'version' Eq ('"VersionNum"' | "'VersionNum'")
# Eq ::= S? '=' S?
# VersionNum ::= ([a-zA-Z0-9_.:] | '-')+
# EncodingDecl ::= S 'encoding' Eq '"' EncName '"' | "'" EncName "'" 
# EncName ::= [A-Za-z] ([A-Za-z0-9._] | '-')*
# SDDecl ::= S 'standalone' Eq "'" ('yes' | 'no') "'" 
#            | S 'standalone' Eq '"' ('yes' | 'no') '"' 
# we start after the <?, with saving on
State TryXMLD InDoc {trying for <?xml}
T x TryXMLD2
T $NameStart PI2
State TryXMLD2 InDoc {}
T m TryXMLD3
T $NameC PI2
T $S PI3 !EndSave
T ? PICMustHaveGT !EndSave
State TryXMLD3 InDoc {}
T l TryXMLD4
T $NameC PI2
T $S PI3 !EndSave
T ? PICMustHaveGT !EndSave
State TryXMLD4 InDoc {}
T $S XMLDs1 !EndSave
T $NameC PI2
State XMLDs1 InDoc {in XML declaration}
T v Keyword(version,AfterVersion,1)
T $S XMLDs1
State AfterVersion InDoc {}
T $S AfterVersion
T = AfterVersEq
State AfterVersEq InDoc {}
T $S AfterVersEq
T ' Keyword('1.0',GotVer,1)
T " Keyword("1.0",GotVer,1)
State GotVer InDoc {}
T $S DoneVer
T ? EndXMLD
State DoneVer InDoc {}
T $S DoneVer
T ? EndXMLD
T e Keyword(encoding,AfterEnc,1) !HotStart
T s Keyword(standalone,AfterStand,1) !HotStart
State AfterEnc InDoc {}
T $S AfterEnc2 !EndSave
T = AfterEncEq !EndSave
State AfterEnc2 InDoc {}
T $S AfterEnc2
T = AfterEncEq

State AfterEncEq InDoc {}
T $S AfterEncEq
T ' SQEncName !ColdStart
T " DQEncName !ColdStart

State SQEncName InDoc {}
T $EncName SQEncName
T ' AfterEncName !EndSave !GotEncoding
State DQEncName InDoc {}
T $EncName DQEncName
T " AfterEncName !EndSave !GotEncoding

State AfterEncName InDoc {}
T $S DoneEncName
T ? EndXMLD
State DoneEncName InDoc {}
T $S DoneEncName
T ? EndXMLD
T s Keyword(standalone,AfterStand,1)

State AfterStand InDoc {}
T $S AfterStand2
T = AfterStandEq
State AfterStand2 InDoc {}
T $S AfterStand2
T = AfterStandEq
State AfterStandEq InDoc {}
T $S AfterStandEq
T ' StandSQ !ColdStart
T " StandDQ !ColdStart

State StandSQ InDoc {}
T y Keyword('yes',AfterSDD,2)
T n Keyword('no',AfterSDD,2)
State StandDQ InDoc {}
T y Keyword("yes",AfterSDD,2)
T n Keyword("no",AfterSDD,2)

State AfterSDD InDoc {}
T ? EndXMLD !EndSave
T $S DoneSDD !EndSave

State DoneSDD InDoc {}
T $S DoneSDD
T ? EndXMLD

State EndXMLD InDoc {}
T > Pop() !GotXMLD
